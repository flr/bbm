% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_methods.R, R/bbmFit_class.R
\docType{class}
\name{bbmFit}
\alias{bbmFit}
\alias{bbmFit-methods}
\alias{bbmFit-class}
\alias{input,bbmFit-method}
\alias{convergence,bbmFit-method}
\alias{message,bbmFit-method}
\alias{fitSumm,bbmFit-method}
\alias{params,bbmFit-method}
\alias{params.se,bbmFit-method}
\alias{vcov,bbmFit-method}
\alias{stock.bio,bbmFit-method}
\alias{indicesB,bbmFit-method}
\alias{indicesP,bbmFit-method}
\alias{plot,bbmFit-method}
\alias{bbmFit,missing-method}
\alias{+,FLStock,bbmFit-method}
\alias{residuals,bbmFit-method}
\alias{logLik,bbmFit-method}
\alias{AIC,bbmFit,ANY-method}
\alias{AIC,bbmFit-method}
\alias{BIC,bbmFit-method}
\alias{iter,bbmFit-method}
\title{bbmFit class}
\usage{
bbmFit(object, ...)

\S4method{bbmFit}{missing}(
  object,
  years = "missing",
  niter = "missing",
  namesB = "missing",
  namesP = "missing",
  ...
)

\S4method{+}{FLStock,bbmFit}(e1, e2)

\S4method{residuals}{bbmFit}(object)

\S4method{logLik}{bbmFit}(object, ...)

\S4method{AIC}{bbmFit,ANY}(object, ..., k = 2)

\S4method{BIC}{bbmFit}(object, ...)

\S4method{iter}{bbmFit}(obj, it)
}
\arguments{
\item{obj}{The object to be subset}

\item{it}{Iteration(s) to be extracted}
}
\description{
\code{bbmFit} class is used for storing the output of the \code{bbm} function.
This includes abundance estimates in biomass (for recruits and adults) and information on the model fit.
}
\section{Slots}{

\describe{
\item{input      }{ Input data. \code{list}, Containing the following information:
catch, indicesB, indicesP, perindicesB, perindicesP, control, f and nper.}
\item{convergence}{ Convergence code, \code{vector(niter)}. Where 0 indicates successful completion.
For other possible error codes see \code{?optim}.}
\item{message    }{ Character string giving any additional information returned by the optimizer, or \code{""}.}
\item{fitSumm    }{ Fit summary (with information on 'nlogL', 'nobs', 'nopar'), \code{array[3,niter]}.}
\item{params     }{ Estimated parameters in \code{bbm} function, \code{FLPar[npar,niter]}, in linear scale.}
\item{params.se  }{ Standard errors in parameters' estimates. \code{FLPar[npar,niter]}, in linear scale.}
\item{vcov       }{ Variance-covariance matrix, \code{array[npar,npar,niter]}.}
\item{stock.bio  }{ Estimated stock biomass for recruits and adults in the different seasons,
where seasons are dertermined by the index times.
\code{FLQuant} with two age classes: recruits and adults. }
\item{indicesB   }{ Estimates of surveys' total abundances in biomass, \code{FLQuants}.}
\item{indicesP   }{ Estimates of surveys' percentage of recruits in biomass, \code{FLQuants}.}
}
}

\section{Validity}{

\describe{
\item{Dimensions}{ \itemize{ \item{\code{age}:}
{stock.bio must be an \code{FLQuant} with only 2 age classes (recruits and adults) and
each index in \code{indicesB} must be an \code{FLQuant} with only 1 age class ('all')}
\item{\code{year, unit, season, area}:}
{equal for \code{stock.bio}, \code{indicesB} and \code{indicesP}}
\item{\code{iter}:}
{equal for \code{stock.bio}, \code{convergence}, \code{fitSumm},
\code{indicesB} and \code{indicesP}}
}
}
\item{Parameters}{Same number of parameters required in \code{params}, \code{params.se} and \code{vcov}}
}
You can inspect the class validity function by using
\code{getValidity(getClassDef('bbmFit'))}
}

\section{Accessors}{

All slots in the class have accessor methods defined that allow retrieving individual slots.
}

\section{Constructor}{

A construction method exists for this class that can take named arguments for
any of its slots. All slots are then created to match the requirements of the
class validity. If \code{years}, \code{niter}, \code{namesB} or \code{namesP} are provided,
this is used for sizing and naming the different slots.
}

\section{Methods}{

Methods exist for various calculations based on values stored in the class:

\describe{
\item{+        }{ Updates an \code{FLStock} with new information on the BBM assessment.}
\item{residuals}{ Calculates Pearson residuals, returns an object of class \code{bbmFitresiduals}.}
\item{logLik   }{ Method to extract Log-Likelihood, returns an object of class \code{logLik}.}
\item{AIC      }{ Method to calculate Akaike's 'An Information Criterion' (AIC) of a \code{bbmFit} object
from the value of the obtained log-likelihood stored in its \code{logLik} slot.}
\item{BIC      }{ Method to calculate the Bayesian information criterion (BIC),
also known as Schwarz's Bayesian criterion of a \code{bbmFit} object
from the value of the obtained log-likelihood stored in its \code{logLik} slot.}
\item{iter     }{ Extracts a subset of the iterations contained in a \code{bbmFit} object.}
\item{plot     }{ One plot for estimated abundances and one extra plot for each of the surveys
with the fitting of total biomass and proportion of recruits.}
}
}

\examples{

# Load data
data(ane)

# Generate an object of bbmFit class (different alternatives)
new("bbmFit")                # empty object
slotNames(bbmFit())          # slots

# bbmFit: setting dimensions for stock.bio
bbmFit( stock.bio = FLQuant(dim=c(2,20,1,3,1,1), dimnames=list(age=1:2, year=1980:1999))) 

# bbmFit: params class - FLPar with specific parameters for bbm function
bbmFit( params=bbmFLPar(years=dimnames(catch.ane)$year, 
                        namesB=names(indicesB.ane), namesP=names(indicesP.ane))) 

# Run assessment (output is of class bbmFit)
run <- bbm(catch.ane, indicesB=indicesB.ane, indicesP=indicesP.ane, control=control.ane, inits=inits.ane)
class(run)
run

# Plot
plot(run)


stock <- FLStock(catch.n=catch.ane, catch.wt=catch.ane*0+1)
units(stock@catch.wt) <- ''
stock@catch <- quantSums(stock@catch.n*stock@catch.wt)

newst <- stock + run # we must sum to the bbmFit object not to stock.bio(run)


# calculate residuals
residuals(run)

# log-Likelihood
logLik(run)

# AIC and BIC
AIC(run)

BIC(run)
}
\seealso{
\link{bbm}, \link{bbmFitresiduals}, \link{logLik}, \link{bbmFLPar}, \link{plot}
}
\author{
Leire Ibaibarriaga & Sonia Sanchez
}
\keyword{classes}
